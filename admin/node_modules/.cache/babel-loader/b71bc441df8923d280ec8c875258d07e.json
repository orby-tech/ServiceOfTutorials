{"ast":null,"code":"var _jsxFileName = \"/home/oem/React/ServiceOfTutorials/frontend/src/Comments.js\";\nimport React, { Component } from 'react';\nimport Service from './Service';\nimport { multilanguage, changeLanguage, loadLanguages } from \"redux-multilanguage\";\nimport { connect } from 'react-redux';\nconst service = new Service();\n\nclass PREComments extends Component {\n  constructor(props) {\n    super(props);\n    this.handleShow = this.handleShow.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.state = {\n      id: this.props.id,\n      comments: [],\n      showNewComment: false\n    };\n  }\n\n  componentDidMount() {\n    var self = this;\n    console.log(this.state.id);\n    service.getComments({\n      id: this.state.id\n    }).then(function (result) {\n      self.setState({\n        comments: result\n      });\n      console.log(result);\n    });\n  }\n\n  handleShow() {\n    this.setState({\n      showNewComment: true\n    });\n  }\n\n  closeModal() {\n    this.setState({\n      showNewComment: false\n    });\n  }\n\n  delelteComment(comment) {\n    service.deleteComment({\n      comment: comment,\n      article: this.state.id\n    }).then(function (result) {\n      alert(\"Комментарий удален\");\n      window.location.reload();\n    });\n  }\n\n  dateNow(time) {\n    let now = Date.now();\n    let days = (now - time) / 1000 / 3600; //24\n\n    if (days <= 1) {\n      return \"Сегодня\";\n    } else if (days <= 3) {\n      return \"Не позже трех дней\";\n    } else if (days <= 7) {\n      return \"В течении недели\";\n    } else if (days <= 30) {\n      return \"В течении месяца\";\n    } else {\n      return \"Давно\";\n    }\n  }\n\n  newCommentAppend() {\n    if (document.getElementById(\"newCommentHeader\").value && document.getElementById(\"newCommentText\").value && document.getElementById(\"newCommentName\").value) {\n      service.appendComment({\n        header: document.getElementById(\"newCommentHeader\").value,\n        text: document.getElementById(\"newCommentText\").value,\n        name: document.getElementById(\"newCommentName\").value,\n        articleId: this.state.id\n      }).then(function (result) {\n        alert(\"Спасибо за комментаий!)\");\n        window.location.reload();\n      });\n    } else {\n      alert(\"Все поля должны быть заполнены\");\n    }\n  }\n\n  render() {\n    let status = localStorage.getItem('status') === \"god\" ? \"\" : \"create-article__non-display\";\n    const {\n      strings,\n      currentLanguageCode\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comments__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"comments__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, \"  \", strings[\"comments__comments\"], \" \"), this.state.comments.map(comment => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comments__block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"comments__header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }\n    }, comment.header, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"comments__date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, this.dateNow(comment.date)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comments__text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }, \" \", comment.text, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comments__author\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }, \" \\u0430\\u0432\\u0442\\u043E\\u0440: \", comment.author, \" \"), /*#__PURE__*/React.createElement(\"button\", {\n      className: status,\n      onClick: () => this.delelteComment(comment),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"newComment__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, \"\\u041A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      id: \"newCommentName\",\n      placeholder: \"\\u041A\\u0430\\u043A \\u0432\\u0430\\u0441 \\u0437\\u0432\\u0430\\u0442\\u044C?)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"newComment__header form-control\",\n      id: \"newCommentHeader\",\n      placeholder: \"\\u0417\\u0430\\u0433\\u043E\\u043B\\u043E\\u0432\\u043E\\u043A\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      className: \"newComment__text form-control\",\n      id: \"newCommentText\",\n      type: \"text\",\n      placeholder: \"\\u041A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"newComment__uppend btn btn-success\",\n      onClick: () => this.newCommentAppend(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, \" \\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \")));\n  }\n\n}\n\nconst Comments = connect()(multilanguage(PREComments));\nexport default Comments;","map":{"version":3,"sources":["/home/oem/React/ServiceOfTutorials/frontend/src/Comments.js"],"names":["React","Component","Service","multilanguage","changeLanguage","loadLanguages","connect","service","PREComments","constructor","props","handleShow","bind","closeModal","state","id","comments","showNewComment","componentDidMount","self","console","log","getComments","then","result","setState","delelteComment","comment","deleteComment","article","alert","window","location","reload","dateNow","time","now","Date","days","newCommentAppend","document","getElementById","value","appendComment","header","text","name","articleId","render","status","localStorage","getItem","strings","currentLanguageCode","map","date","author","Comments"],"mappings":"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","sourcesContent":["import  React, { Component }  from 'react';\n\nimport  Service  from  './Service';\n\n\nimport { multilanguage, changeLanguage, loadLanguages} from \"redux-multilanguage\";\nimport  { connect } from 'react-redux'\n\nconst  service  =  new  Service();\nclass PREComments extends Component{\n\n  constructor(props) {\n    super(props);\n    this.handleShow = this.handleShow.bind(this)\n    this.closeModal = this.closeModal.bind(this)\n    this.state = {\n      id: this.props.id,\n      comments: [],\n      showNewComment: false \n    };\n  }\n  componentDidMount(){\n    var  self  =  this;\n    console.log(this.state.id)\n    service.getComments({id: this.state.id}).then(function (result) {\n      self.setState({ comments: result })\n      console.log(result)\n    });\n  }\n  handleShow(){\n    this.setState({showNewComment: true})\n  }\n  closeModal(){\n    this.setState({showNewComment: false})\n  }\n  delelteComment(comment){\n    service.deleteComment({ comment: comment, article: this.state.id }).then(function (result) {\n\n      alert(\"Комментарий удален\")\n      window.location.reload()\n    });\n  }\n  dateNow(time){\n    let now = Date.now()\n    let days = (now - time)/1000/3600//24\n    if (days <= 1){\n      return \"Сегодня\"\n    } else if(days <= 3){\n      return \"Не позже трех дней\"\n    } else if(days <= 7){\n      return \"В течении недели\"\n    } else if(days <= 30){\n      return \"В течении месяца\"\n    } else {\n      return \"Давно\"\n    }\n  }\n  newCommentAppend(){\n    if(document.getElementById(\"newCommentHeader\").value &&\n      document.getElementById(\"newCommentText\").value &&\n      document.getElementById(\"newCommentName\").value){\n\n      service.appendComment({\n        header: document.getElementById(\"newCommentHeader\").value,\n        text: document.getElementById(\"newCommentText\").value,\n        name: document.getElementById(\"newCommentName\").value,\n        articleId: this.state.id\n      }).then(function (result) {\n        alert(\"Спасибо за комментаий!)\")\n        window.location.reload()\n      });\n\n    } else {\n      alert(\"Все поля должны быть заполнены\")\n    }\n  }\n\n\n  render() {\n    let status = localStorage.getItem('status') === \"god\" ? \"\" : \"create-article__non-display\" \n    const { strings, currentLanguageCode } = this.props;\n\n    return(\n      <div className=\"comments__container\">\n        <h2 className=\"comments__title\">  {strings[\"comments__comments\"]} </h2>\n        {\n          this.state.comments.map(comment =>\n            <div className=\"comments__block\">\n              <h2 className=\"comments__header\">{comment.header} </h2>\n              <p className=\"comments__date\">{this.dateNow(comment.date)}</p>\n              <br/>\n              <div className=\"comments__text\"> {comment.text} </div>\n              <div className=\"comments__author\"> автор: {comment.author} </div>\n              <button className={status} onClick={() => this.delelteComment(comment)}></button>\n            </div>\n            )\n        }\n\n\n        <div className=\"newComment__container\">\n          <h3>Комментарий</h3>\n            <input className=\"form-control\" id=\"newCommentName\" placeholder=\"Как вас звать?)\"/>\n            <input className=\"newComment__header form-control\" id=\"newCommentHeader\" placeholder=\"Заголовок\"/>\n            <textarea className=\"newComment__text form-control\" id=\"newCommentText\" type=\"text\" placeholder=\"Комментарий\"/>\n            <button className=\"newComment__uppend btn btn-success\" onClick={() => this.newCommentAppend()}> Добавить </button>\t \n        </div>\n\n\n        \n      </div>\n    );\n  }\n}\nconst Comments = connect()(multilanguage(PREComments));\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}